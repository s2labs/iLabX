node n1 {
    type router
    model PC
    network-config {
	hostname host1
	!
	interface eth0
	 mac address 02:00:00:00:00:01
	!
    }
    canvas c1
    iconcoords {70 560}
    labelcoords {70 600}
    interface-peer {eth0 n5}
    services {SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('configure_resolver.sh', 'add_ilabxCA.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh configure_resolver.sh', 'sh add_ilabxCA.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:add_ilabxCA.sh
	custom-command add_ilabxCA.sh
	config {
	#!/bin/bash
	
	path=/home/ilab/.mozilla/firefox
	# find the randomly named default profile of firefox
	if [[ $(grep '\[Profile[^0]\]' $path/profiles.ini) ]]; then
	   profile=$(grep -E '^\[Profile|^Path|^Default' $path/profiles.ini | grep -1 '^Default=1' | grep '^Path' | cut -c6-)
	else 
	   profile=$(grep 'Path=' $path/profiles.ini | sed 's/^Path=//')
	fi
	
	# add the ilabX CA to that profile as trusted
	certutil -A -d sql:/home/ilab/.mozilla/firefox/$profile -i /etc/ssl/certs/ilabxCA.pem -n ilabX-CA -t TC,TC,TC
	}
    }
    custom-config {
	custom-config-id service:UserDefined:configure_resolver.sh
	custom-command configure_resolver.sh
	config {
	#!/bin/sh
	
	echo "" > /etc/resolv.conf
	}
    }
}

node n2 {
    type router
    model PC
    network-config {
	hostname host2
	!
	interface eth0
	 mac address 02:00:00:00:00:02
	!
    }
    canvas c1
    iconcoords {230 560}
    labelcoords {230 600}
    interface-peer {eth0 n5}
    services {SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('configure_resolver.sh', 'add_ilabxCA.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh configure_resolver.sh', 'sh add_ilabxCA.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:add_ilabxCA.sh
	custom-command add_ilabxCA.sh
	config {
	#!/bin/bash
	
	path=/home/ilab/.mozilla/firefox
	# find the randomly named default profile of firefox
	if [[ $(grep '\[Profile[^0]\]' $path/profiles.ini) ]]; then
	   profile=$(grep -E '^\[Profile|^Path|^Default' $path/profiles.ini | grep -1 '^Default=1' | grep '^Path' | cut -c6-)
	else 
	   profile=$(grep 'Path=' $path/profiles.ini | sed 's/^Path=//')
	fi
	
	# add the ilabX CA to that profile as trusted
	certutil -A -d sql:/home/ilab/.mozilla/firefox/$profile -i /etc/ssl/certs/ilabxCA.pem -n ilabX-CA -t TC,TC,TC
	}
    }
    custom-config {
	custom-config-id service:UserDefined:configure_resolver.sh
	custom-command configure_resolver.sh
	config {
	#!/bin/sh
	
	echo "" > /etc/resolv.conf
	}
    }
}

node n3 {
    type router
    model PC
    network-config {
	hostname host3
	!
	interface eth0
	 mac address 02:00:00:00:00:03
	!
    }
    canvas c1
    iconcoords {70 390}
    labelcoords {70 430}
    interface-peer {eth0 n5}
    services {SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('configure_resolver.sh', 'add_ilabxCA.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh configure_resolver.sh', 'sh add_ilabxCA.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:add_ilabxCA.sh
	custom-command add_ilabxCA.sh
	config {
	#!/bin/bash
	
	path=/home/ilab/.mozilla/firefox
	# find the randomly named default profile of firefox
	if [[ $(grep '\[Profile[^0]\]' $path/profiles.ini) ]]; then
	   profile=$(grep -E '^\[Profile|^Path|^Default' $path/profiles.ini | grep -1 '^Default=1' | grep '^Path' | cut -c6-)
	else 
	   profile=$(grep 'Path=' $path/profiles.ini | sed 's/^Path=//')
	fi
	
	# add the ilabX CA to that profile as trusted
	certutil -A -d sql:/home/ilab/.mozilla/firefox/$profile -i /etc/ssl/certs/ilabxCA.pem -n ilabX-CA -t TC,TC,TC
	}
    }
    custom-config {
	custom-config-id service:UserDefined:configure_resolver.sh
	custom-command configure_resolver.sh
	config {
	#!/bin/sh
	
	echo "" > /etc/resolv.conf
	}
    }
}

node n4 {
    type router
    model PC
    network-config {
	hostname host4
	!
	interface eth0
	 mac address 02:00:00:00:00:04
	!
    }
    canvas c1
    iconcoords {140 170}
    labelcoords {140 140}
    interface-peer {eth0 n6}
    services {SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('configure_resolver.sh', 'add_ilabxCA.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh configure_resolver.sh', 'sh add_ilabxCA.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:add_ilabxCA.sh
	custom-command add_ilabxCA.sh
	config {
	#!/bin/bash
	
	path=/home/ilab/.mozilla/firefox
	# find the randomly named default profile of firefox
	if [[ $(grep '\[Profile[^0]\]' $path/profiles.ini) ]]; then
	   profile=$(grep -E '^\[Profile|^Path|^Default' $path/profiles.ini | grep -1 '^Default=1' | grep '^Path' | cut -c6-)
	else 
	   profile=$(grep 'Path=' $path/profiles.ini | sed 's/^Path=//')
	fi
	
	# add the ilabX CA to that profile as trusted
	certutil -A -d sql:/home/ilab/.mozilla/firefox/$profile -i /etc/ssl/certs/ilabxCA.pem -n ilabX-CA -t TC,TC,TC
	}
    }
    custom-config {
	custom-config-id service:UserDefined:configure_resolver.sh
	custom-command configure_resolver.sh
	config {
	#!/bin/sh
	
	echo "" > /etc/resolv.conf
	}
    }
}

node n5 {
    type lanswitch
    network-config {
	hostname switch1
	!
    }
    canvas c1
    iconcoords {150 460}
    labelcoords {150 505}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n6}
}

node n6 {
    type router
    model router
    network-config {
	hostname router1
	!
	interface eth2
	 mac address 02:00:00:00:00:F3
	 ipv6 address 2001:DB8:BEE:C1::FE/127
	!
	interface eth1
	 mac address 02:00:00:00:00:F2
	 ipv6 address 2001:DB8:BEE:22::1/64
	!
	interface eth0
	 mac address 02:00:00:00:00:F1
	 ipv6 address 2001:DB8:BEE:11::1/64
	!
    }
    canvas c1
    iconcoords {290 300}
    labelcoords {315 280}
    interface-peer {eth0 n5}
    interface-peer {eth1 n4}
    interface-peer {eth2 n11}
    services {SSH IPForward DefaultRoute radvd UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('setup_resolver.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh setup_resolver.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup_resolver.sh
	custom-command setup_resolver.sh
	config {
	#!/bin/sh
	
	echo "" > /etc/resolv.conf
	
	cat <<EOF > /etc/unbound/unbound.conf
	server:
	    interface: 0.0.0.0
	    interface: ::0
	    access-control: 0.0.0.0/0 allow_snoop
	    access-control: ::0/0 allow_snoop
	    cache-max-ttl: 86400
	    root-hints: "/etc/unbound/root.hints"
	    do-ip6: yes
	    cache-max-ttl: 0
	EOF
	
	cat <<EOF > /etc/unbound/root.hints
	.                        IN      NS     A.ROOT-SERVERS.EDU.
	A.ROOT-SERVERS.EDU.      IN      AAAA	2001:DB8:CC::FF:FE00:9
	EOF
	
	unbound
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add default proto static via 2001:DB8:BEE:C1::FF
	}
    }
    custom-config {
	custom-config-id service:radvd
	custom-command radvd
	config {
	files=('/etc/radvd/radvd.conf', )
	}
    }
    custom-config {
	custom-config-id service:radvd:/etc/radvd/radvd.conf
	custom-command /etc/radvd/radvd.conf
	config {
	interface eth0 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BEE:11::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	
	interface eth1 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BEE:22::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	}
    }
}

node n7 {
    type hub
    network-config {
	hostname switch2
	!
    }
    canvas c1
    iconcoords {500 210}
    labelcoords {550 215}
    interface-peer {e0 n8}
    interface-peer {e1 n9}
    interface-peer {e3 n11}
}

node n8 {
    type router
    model host
    network-config {
	hostname webserver
	!
	interface eth0
	 mac address 02:00:00:00:00:05
	!
    }
    canvas c1
    iconcoords {420 110}
    labelcoords {420 85}
    interface-peer {eth0 n7}
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	dirs=('/etc/apache2', '/var/run/apache2', '/var/log/apache2', '/var/lock/apache2', '/run/lock', )
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', 'config-hosts.sh', )
	cmdup=('chown www-data /var/lock/apache2', 'apache2ctl start', 'rm -r /var/www/html', 'sh config-hosts.sh', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:config-hosts.sh
	custom-command config-hosts.sh
	config {
	#!/bin/sh
	rm /var/www/index.html
	
	mkdir -p /etc/apache2/sites-enabled
	mkdir -p /etc/apache2/sites-available
	
	# base  config for honey
	cat <<EOF > /etc/apache2/sites-available/honey.conf
	
	EOF
	
	cat <<EOF > /var/www/honey/special/.htaccess
	AuthType Basic
	AuthName "Please provide the credentials"
	AuthUserFile /var/www/honey/special/.htpasswd
	Require valid-user
	
	EOF
	
	htpasswd -c -b /var/www/honey/special/.htpasswd bee special
	a2ensite honey.conf
	
	# base  config for candles
	cat <<EOF > /etc/apache2/sites-available/candles.conf
	<VirtualHost *:80>
	        ServerAdmin admin@candles.com
	        ServerName candles.b-shop.ilabx
	        DocumentRoot /var/www/candles
	</VirtualHost>
	
	<VirtualHost *:443>
	        ServerAdmin admin@candles.com
	        ServerName candles.b-shop.ilabx
	        DocumentRoot /var/www/candles
	        SSLEngine on
	        SSLCertificateFile "/etc/ssl/certs/candles.pem"
	        SSLCertificateKeyFile "/etc/ssl/private/candles.key"
	        SSLProtocol TLSv1.1 TLSv1.2
	        SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256
	        SSLSessionTickets off
	</VirtualHost>
	EOF
	
	a2ensite candles.conf
	
	# base  config for base pages before virtualHosts
	cat <<EOF > /etc/apache2/sites-available/basic.conf
	<VirtualHost *:80>
	        ServerAdmin admin@localhost
	        ServerName localhost
	        DocumentRoot /var/www
	</VirtualHost>
	EOF
	a2ensite basic.conf
	
	
	service apache2 restart
	
	}
    }
    custom-config {
	custom-config-id service:HTTP:/etc/apache2/apache2.conf
	custom-command /etc/apache2/apache2.conf
	config {
	# apache2.conf generated by utility.py:HttpService
	Mutex file:${APACHE_LOCK_DIR} default
	PidFile ${APACHE_PID_FILE}
	Timeout 300
	KeepAlive On
	MaxKeepAliveRequests 100
	KeepAliveTimeout 5
	LoadModule mpm_worker_module /usr/lib/apache2/modules/mod_mpm_worker.so
	
	<IfModule mpm_prefork_module>
	    StartServers          5
	    MinSpareServers       5
	    MaxSpareServers      10
	    MaxClients          150
	    MaxRequestsPerChild   0
	</IfModule>
	
	<IfModule mpm_worker_module>
	    StartServers          2
	    MinSpareThreads      25
	    MaxSpareThreads      75 
	    ThreadLimit          64
	    ThreadsPerChild      25
	    MaxClients          150
	    MaxRequestsPerChild   0
	</IfModule>
	
	<IfModule mpm_event_module>
	    StartServers          2
	    MinSpareThreads      25
	    MaxSpareThreads      75 
	    ThreadLimit          64
	    ThreadsPerChild      25
	    MaxClients          150
	    MaxRequestsPerChild   0
	</IfModule>
	
	User ${APACHE_RUN_USER}
	Group ${APACHE_RUN_GROUP}
	
	AccessFileName .htaccess
	
	<Files ~ "^\.ht">
	    Require all denied
	</Files>
	
	DefaultType None
	
	HostnameLookups Off
	
	ErrorLog ${APACHE_LOG_DIR}/error.log
	LogLevel debug
	
	#Include mods-enabled/*.load
	#Include mods-enabled/*.conf
	#Include sites-enabled/*.conf
	LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
	LoadModule auth_basic_module /usr/lib/apache2/modules/mod_auth_basic.so
	LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
	LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so
	LoadModule authz_user_module /usr/lib/apache2/modules/mod_authz_user.so
	LoadModule autoindex_module /usr/lib/apache2/modules/mod_autoindex.so
	LoadModule dir_module /usr/lib/apache2/modules/mod_dir.so
	LoadModule env_module /usr/lib/apache2/modules/mod_env.so
	LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so
	LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so
	LoadModule authn_file_module /usr/lib/apache2/modules/mod_authn_file.so
	
	NameVirtualHost *:80
	Listen 80
	
	NameVirtualHost *:80
	Listen 80
	
	<IfModule mod_ssl.c>
	    NameVirtualHost *:443
	    Listen 443
	</IfModule>
	<IfModule mod_gnutls.c>
	    NameVirtualHost *:443
	    Listen 443
	</IfModule>
	
	LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
	LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
	LogFormat "%h %l %u %t \"%r\" %>s %O" common
	LogFormat "%{Referer}i -> %U" referer
	LogFormat "%{User-agent}i" agent
	
	ServerTokens OS
	ServerSignature On
	TraceEnable Off
	
	<Directory /var/www/>
	        Options Indexes FollowSymLinks MultiViews
		AllowOverride All
		Require all granted
	</Directory>
	
	Include sites-enabled/*.conf
	}
    }
    services {DefaultRoute SSH HTTP UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', )
	}
    }
}

node n9 {
    type router
    model host
    network-config {
	hostname dns
	!
	interface eth0
	 mac address 02:00:00:00:00:06
	!
    }
    canvas c1
    iconcoords {580 110}
    labelcoords {580 85}
    interface-peer {eth0 n7}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('setup_dns.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh setup_dns.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup_dns.sh
	custom-command setup_dns.sh
	config {
	#!/bin/sh
	rm /etc/bind/db.0
	rm /etc/bind/db.127
	rm /etc/bind/db.255
	rm /etc/bind/db.empty
	rm /etc/bind/db.local
	rm /etc/bind/zones.rfc1918
	rm /etc/bind/named.conf.default-zones
	rm /etc/bind/named.conf.local
	rm /etc/bind/named.conf.options
	rm /etc/bind/bind.keys
	rm /etc/bind/rndc.key
	rm /etc/bind/db.root
	
	echo "" > /etc/resolv.conf
	
	cat <<EOF > /etc/bind/named.conf
	options {
		recursion no;
	};
	zone "b-shop.ilabx" IN {
	    type master;
	    file "/etc/bind/db.b-shop.ilabx";
	};
	EOF
	
	cat <<EOF > /etc/bind/db.b-shop.ilabx
	\$TTL 86400
	b-shop.ilabx.       IN      SOA ns.b-shop.ilabx. hostmaster.ns.b-shop.ilabx. (
	        1       ; serial number (update count)
	        28800   ; refresh (8 h)
	        7200    ; retry (2 h)
	        604800  ; expire
	        10800   ; negative caching
	        )
	
	b-shop.ilabx.	IN	NS	ns.b-shop.ilabx.
	ns.b-shop.ilabx.	IN	AAAA	2001:DB8:BEE:33::FF:FE00:6
	
	candles.b-shop.ilabx.	IN	AAAA	2001:DB8:BEE:33::FF:FE00:5
	
	EOF
	
	service bind9 start
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n11 {
    type router
    model router
    network-config {
	hostname router2
	!
	interface eth2
	 mac address 02:00:00:00:00:F6
	 ipv6 address 2001:DB8:AA::20/64
	!
	interface eth1
	 mac address 02:00:00:00:00:F5
	 ipv6 address 2001:DB8:BEE:C1::FF/127
	!
	interface eth0
	 mac address 02:00:00:00:00:F4
	 ipv6 address 2001:DB8:BEE:33::1/64
	!
    }
    canvas c1
    iconcoords {500 300}
    labelcoords {535 280}
    interface-peer {eth0 n7}
    interface-peer {eth1 n6}
    interface-peer {eth2 n12}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add default via 2001:DB8:AA::1
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add 2001:DB8:BEE:11::/64 proto static via 2001:DB8:BEE:C1::FE
	/sbin/ip -6 route add 2001:DB8:BEE:22::/64 proto static via 2001:DB8:BEE:C1::FE
	}
    }
    custom-config {
	custom-config-id service:radvd
	custom-command radvd
	config {
	files=('/etc/radvd/radvd.conf', )
	}
    }
    custom-config {
	custom-config-id service:radvd:/etc/radvd/radvd.conf
	custom-command /etc/radvd/radvd.conf
	config {
	interface eth0 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BEE:33::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	
	}
    }
    services {UserDefined SSH IPForward DefaultRoute StaticRoute radvd}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', )
	}
    }
}

node n12 {
    type router
    model router
    network-config {
	hostname isp
	!
	interface eth2
	 mac address 02:00:00:00:00:F9
	 ipv6 address 2001:DB8:DD::1/64
	!
	interface eth1
	 mac address 02:00:00:00:00:41
	 ipv6 address 2001:DB8:CC::1/64
	!
	interface eth0
	 ipv6 address 2001:DB8:AA::1/64
	 mac address 02:00:00:00:00:F7
	!
    }
    canvas c1
    iconcoords {670 420}
    labelcoords {710 425}
    interface-peer {eth0 n11}
    interface-peer {eth1 n13}
    custom-config {
	custom-config-id service:radvd
	custom-command radvd
	config {
	files=('/etc/radvd/radvd.conf', )
	}
    }
    custom-config {
	custom-config-id service:radvd:/etc/radvd/radvd.conf
	custom-command /etc/radvd/radvd.conf
	config {
	interface eth1 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:CC::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	interface eth2 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:DD::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add 2001:DB8:BEE::/48 proto static via 2001:DB8:AA::20
	
	
	}
    }
    services {UserDefined IPForward StaticRoute SSH radvd}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', )
	}
    }
    interface-peer {eth2 n10}
}

node n13 {
    type router
    model host
    network-config {
	hostname rootDns
	!
	interface eth0
	 mac address 02:00:00:00:00:09
	!
    }
    canvas c1
    iconcoords {670 310}
    labelcoords {670 285}
    interface-peer {eth0 n12}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('create_named_conf.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh create_named_conf.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:create_named_conf.sh
	custom-command create_named_conf.sh
	config {
	#!/bin/sh
	rm /etc/bind/db.0
	rm /etc/bind/db.127
	rm /etc/bind/db.255
	rm /etc/bind/db.empty
	rm /etc/bind/db.local
	rm /etc/bind/zones.rfc1918
	rm /etc/bind/named.conf.default-zones
	rm /etc/bind/named.conf.local
	rm /etc/bind/named.conf.options
	rm /etc/bind/bind.keys
	rm /etc/bind/rndc.key
	
	
	echo "" > /etc/resolv.conf
	
	cat <<EOF > /etc/bind/named.conf
	options {
		recursion no;
	};
	# configuration for the root zone
	zone "." IN {
	    type master;
	    file "/etc/bind/db.root";
	};
	
	EOF
	
	cat <<EOF > /etc/bind/db.root
	\$TTL 86400
	. IN SOA A.ROOT-SERVERS.EDU. root.A.ROOT-SERVERS.EDU. (
	        1       ; serial number (update count)
	        28800   ; refresh (8 h)
	        7200    ; retry (2 h)
	        604800  ; expire
	        10800   ; negative caching
	        )
	
	.                        IN      NS     A.ROOT-SERVERS.EDU.
	A.ROOT-SERVERS.EDU.      IN      AAAA	2001:DB8:CC::FF:FE00:9
	
	ns.ilabx.	IN	AAAA	2001:db8:dd::ff:fe00:10
	EOF
	
	
	
	service bind9 start
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n10 {
    type router
    model host
    network-config {
	hostname tldDns
	!
	interface eth0
	 mac address 02:00:00:00:00:10
	!
    }
    canvas c1
    iconcoords {670 510}
    labelcoords {670 550}
    interface-peer {eth0 n12}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('setup_dns.sh', )
	cmdup=('mount -t tmpfs tmpfs /dev/shm', 'mount -a', 'sh setup_dns.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup_dns.sh
	custom-command setup_dns.sh
	config {
	#!/bin/sh
	rm /etc/bind/db.0
	rm /etc/bind/db.127
	rm /etc/bind/db.255
	rm /etc/bind/db.empty
	rm /etc/bind/db.local
	rm /etc/bind/zones.rfc1918
	rm /etc/bind/named.conf.default-zones
	rm /etc/bind/named.conf.local
	rm /etc/bind/named.conf.options
	rm /etc/bind/bind.keys
	rm /etc/bind/rndc.key
	rm /etc/bind/db.root
	
	echo "" > /etc/resolv.conf
	
	cat <<EOF > /etc/bind/named.conf
	options {
		recursion no;
	};
	
	EOF
	
	cat <<EOF > /etc/bind/db.ilabx
	\$TTL 86400
	ilabx.       IN      SOA ns.ilabx. hostmaster.ns.ilab. (
	        1       ; serial number (update count)
	        28800   ; refresh (8 h)
	        7200    ; retry (2 h)
	        604800  ; expire
	        10800   ; negative caching
	        )
	
	ilabx.	IN	NS	ns.ilabx.
	ns.ilabx.	IN	AAAA	2001:db8:dd::ff:fe00:10
	
	b-shop.ilabx.	IN	NS	ns.b-shop.ilabx.
	ns.b-shop.ilabx.	IN	AAAA	2001:DB8:BEE:33::FF:FE00:6
	
	
	EOF
	
	service bind9 start
	}
    }
    services {DefaultRoute SSH UserDefined}
}

link l1 {
    nodes {n1 n5}
    bandwidth 0
}

link l2 {
    nodes {n2 n5}
    bandwidth 0
}

link l3 {
    nodes {n3 n5}
    bandwidth 0
}

link l4 {
    nodes {n5 n6}
    bandwidth 0
}

link l5 {
    nodes {n4 n6}
    bandwidth 0
}

link l6 {
    nodes {n6 n11}
    bandwidth 0
}

link l7 {
    nodes {n8 n7}
    bandwidth 0
}

link l8 {
    nodes {n9 n7}
    bandwidth 0
}

link l10 {
    nodes {n11 n7}
    bandwidth 0
}

link l11 {
    nodes {n11 n12}
    bandwidth 0
}

link l12 {
    nodes {n12 n13}
    bandwidth 0
}

link l9 {
    nodes {n10 n12}
    bandwidth 0
}

annotation a1 {
    iconcoords {10 40 290 290}
    type rectangle
    label {Local Network 2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cdeb8b
    width 1
    border black
    rad 0
    canvas c1
}

annotation a2 {
    iconcoords {10 310 290 620}
    type rectangle
    label {Local Network 1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cdeb8b
    width 1
    border black
    rad 0
    canvas c1
}

annotation a3 {
    iconcoords {350 40 620 290}
    type rectangle
    label {Server Zone}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #f8cecc
    width 1
    border black
    rad 0
    canvas c1
}

annotation a4 {
    iconcoords {0 0 630 630}
    type rectangle
    label {Internal Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #7ea6e0
    width 1
    border black
    rad 0
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses no
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}

