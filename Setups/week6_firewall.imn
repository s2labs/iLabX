node n1 {
    type router
    model PC
    network-config {
	hostname host1
	!
	interface eth0
	 mac address 02:00:00:00:00:01
	!
    }
    canvas c1
    iconcoords {70 560}
    labelcoords {70 600}
    interface-peer {eth0 n5}
}

node n2 {
    type router
    model PC
    network-config {
	hostname host2
	!
	interface eth0
	 mac address 02:00:00:00:00:02
	!
    }
    canvas c1
    iconcoords {230 560}
    labelcoords {230 600}
    interface-peer {eth0 n5}
}

node n3 {
    type router
    model PC
    network-config {
	hostname host3
	!
	interface eth0
	 mac address 02:00:00:00:00:03
	!
    }
    canvas c1
    iconcoords {70 390}
    labelcoords {70 430}
    interface-peer {eth0 n5}
}

node n4 {
    type router
    model PC
    network-config {
	hostname host4
	!
	interface eth0
	 mac address 02:00:00:00:00:04
	!
    }
    canvas c1
    iconcoords {140 170}
    labelcoords {140 140}
    interface-peer {eth0 n6}
    services {UserDefined SSH } 
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -a', )
	}
    }
}

node n5 {
    type lanswitch
    network-config {
	hostname switch1
	!
    }
    canvas c1
    iconcoords {150 460}
    labelcoords {150 505}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n6}
}

node n6 {
    type router
    model router
    network-config {
	hostname router1
	!
	interface eth2
	 mac address 02:00:00:00:00:F3
	 ipv6 address 2001:DB8:BEE:C1::FE/127
	!
	interface eth1
	 mac address 02:00:00:00:00:F2
	 ipv6 address 2001:DB8:BEE:22::1/64
	!
	interface eth0
	 mac address 02:00:00:00:00:F1
	 ipv6 address 2001:DB8:BEE:11::1/64
	!
    }
    canvas c1
    iconcoords {290 300}
    labelcoords {315 280}
    interface-peer {eth0 n5}
    interface-peer {eth1 n4}
    interface-peer {eth2 n11}
    services {UserDefined SSH IPForward DefaultRoute radvd} 
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -a', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add default proto static via 2001:DB8:BEE:C1::FF
	}
    }
    custom-config {
	custom-config-id service:radvd
	custom-command radvd
	config {
	files=('/etc/radvd/radvd.conf', )
	}
    }
    custom-config {
	custom-config-id service:radvd:/etc/radvd/radvd.conf
	custom-command /etc/radvd/radvd.conf
	config {
	interface eth0 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BEE:11::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	
	interface eth1 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BEE:22::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	}
    }
}

node n7 {
    type hub
    network-config {
	hostname switch2
	!
    }
    canvas c1
    iconcoords {500 210}
    labelcoords {550 215}
    interface-peer {e0 n8}
    interface-peer {e1 n9}
    interface-peer {e2 n10}
    interface-peer {e3 n11}
}

node n8 {
    type router
    model host
    network-config {
	hostname webserver
	!
	interface eth0
	 mac address 02:00:00:00:00:05
	!
    }
    canvas c1
    iconcoords {420 110}
    labelcoords {420 85}
    interface-peer {eth0 n7}
}

node n9 {
    type router
    model host
    network-config {
	hostname dns64
	!
	interface eth0
	 mac address 02:00:00:00:00:06
	!
    }
    canvas c1
    iconcoords {580 110}
    labelcoords {580 85}
    interface-peer {eth0 n7}
}

node n10 {
    type router
    model host
    network-config {
	hostname nat64
	!
	interface eth0
	 mac address 02:00:00:00:00:07
	!
    }
    canvas c1
    iconcoords {410 230}
    labelcoords {410 270}
    interface-peer {eth0 n7}
}

node n11 {
    type router
    model router
    network-config {
	hostname router2
	!
	interface eth2
	 mac address 02:00:00:00:00:F6
	 ipv6 address 2001:DB8:AA::20/64
	!
	interface eth1
	 mac address 02:00:00:00:00:F5
	 ipv6 address 2001:DB8:BEE:C1::FF/127
	!
	interface eth0
	 mac address 02:00:00:00:00:F4
	 ipv6 address 2001:DB8:BEE:33::1/64
	!
    }
    canvas c1
    iconcoords {500 300}
    labelcoords {525 280}
    interface-peer {eth0 n7}
    interface-peer {eth1 n6}
    interface-peer {eth2 n12}
    custom-config {
	custom-config-id service:radvd
	custom-command radvd
	config {
	files=('/etc/radvd/radvd.conf', )
	}
    }
    custom-config {
	custom-config-id service:radvd:/etc/radvd/radvd.conf
	custom-command /etc/radvd/radvd.conf
	config {
	interface eth0 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BEE:33::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	    MaxRtrAdvInterval 10;
	};
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add default via 2001:DB8:AA::1
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add 2001:DB8:BEE:11::/64 proto static via 2001:DB8:BEE:C1::FE
	/sbin/ip -6 route add 2001:DB8:BEE:22::/64 proto static via 2001:DB8:BEE:C1::FE
	}
    }
    services {UserDefined SSH IPForward DefaultRoute StaticRoute radvd} 
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -a', )
	}
    }
}

node n12 {
    type router
    model router
    network-config {
	hostname isp
	!
	interface eth2
	 ipv6 address 2001:DB8:BB::1/64
	 mac address 02:00:00:00:00:F8
	!
	interface eth0
	 ipv6 address 2001:DB8:AA::1/64
	 mac address 02:00:00:00:00:F7
	!
	interface eth1
	 mac address 02:00:00:00:00:41
	!
    }
    canvas c1
    iconcoords {740 420}
    labelcoords {780 425}
    interface-peer {eth0 n11}
    interface-peer {eth1 n13}
    interface-peer {eth2 n14}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	/sbin/ip -6 route add 2001:DB8:BEE::/48 proto static via 2001:DB8:AA::20
	
	
	}
    }
    custom-config {
	custom-config-id service:radvd
	custom-command radvd
	config {
	files=('/etc/radvd/radvd.conf', )
	}
    }
    custom-config {
	custom-config-id service:radvd:/etc/radvd/radvd.conf
	custom-command /etc/radvd/radvd.conf
	config {
	interface eth2 {
	    AdvSendAdvert on;
	    prefix 2001:DB8:BB::/64 {
	        AdvOnLink on;
	        AdvAutonomous on;
	    };
	};
	}
    }
    services {UserDefined SSH IPForward StaticRoute radvd} 
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('mount -a', )
	}
    }
}

node n13 {
    type router
    model host
    network-config {
	hostname ebee
	!
	interface eth0
	 mac address 02:00:00:00:00:42
	!
    }
    canvas c1
    iconcoords {670 510}
    labelcoords {670 550}
    interface-peer {eth0 n12}
}

node n14 {
    type router
    model PC
    network-config {
	hostname hackerman
	!
	interface eth0
	 mac address 02:00:00:00:00:08
	!
    }
    canvas c1
    iconcoords {810 510}
    labelcoords {810 550}
    interface-peer {eth0 n12}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('hack.sh', )
	cmdup=('mount -a', 'sh hack.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hack.sh
	custom-command hack.sh
	config {
	#!/bin/sh
	
	touch /etc/hackerman.py
	
	cat <<EOF > /etc/hackerman.py
	#!/usr/bin/env python3
	
	import os, sys
	import subprocess
	import re,socket
	import time
	
	def ping_pc(address):
	    p = subprocess.Popen(['ping6',address,'-c','1',"-W","2"],stdout=subprocess.PIPE)
	    p.wait()
	    if p.poll()==0:
	        #print("Attacker could use ICMP messages")
	        return True
	    else:
	        return False
	
	def ssh2(address):
	    s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
	    s.settimeout(2)
	    try:
	        s.connect((address, 22))
	        s.shutdown(2)
	        #print("Attacker could use SSH")
	        return True
	    except:
	        return False
	
	def main(args):
	    while(True):
	        ping=ping_pc("2001:db8:bee:33:0:ff:fe00:6")
	        ssh=ssh2("2001:db8:bee:33:0:ff:fe00:6")
	        if not ping and not ssh:
	            #print("Attacker is using a different IP now")
	            p=subprocess.run(["ip","addr", "del", "2001:db8:bb::ff:fe00:8/64", "dev", "eth0"])
	            p=subprocess.run(["ip","addr", "add", "2001:db8:bb::ff:fe00:9/64", "dev", "eth0"])
	            # wait for DAD to complete for global scope
	            time.sleep(5)
	            ping_pc("2001:db8:bee:33:0:ff:fe00:6")
	            ssh2("2001:db8:bee:33:0:ff:fe00:6")
	            p=subprocess.run(["ifconfig", "eth0", "inet6", "del", "2001:db8:bb::ff:fe00:9/64"])
	            p=subprocess.run(["ifconfig", "eth0", "inet6", "add", "2001:db8:bb::ff:fe00:8/64"])
	        #else:
	        #    print("Please prevent the Attacker from using those protocols")
	        time.sleep(10)
	
	if __name__ == "__main__":
	    main(sys.argv)
	EOF
	
	python3 /etc/hackerman.py
	}
    }
    services {DefaultRoute SSH UserDefined}
}

link l1 {
    nodes {n1 n5}
    bandwidth 0
}

link l2 {
    nodes {n2 n5}
    bandwidth 0
}

link l3 {
    nodes {n3 n5}
    bandwidth 0
}

link l4 {
    nodes {n5 n6}
    bandwidth 0
}

link l5 {
    nodes {n4 n6}
    bandwidth 0
}

link l6 {
    nodes {n6 n11}
    bandwidth 0
}

link l7 {
    nodes {n8 n7}
    bandwidth 0
}

link l8 {
    nodes {n9 n7}
    bandwidth 0
}

link l9 {
    nodes {n10 n7}
    bandwidth 0
}

link l10 {
    nodes {n11 n7}
    bandwidth 0
}

link l11 {
    nodes {n11 n12}
    bandwidth 0
}

link l12 {
    nodes {n12 n13}
    bandwidth 0
}

link l13 {
    nodes {n12 n14}
    bandwidth 0
}

annotation a1 {
    iconcoords {10 40 290 290}
    type rectangle
    label {Local Network 2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cdeb8b
    width 1
    border black
    rad 0
    canvas c1
}

annotation a2 {
    iconcoords {10 310 290 620}
    type rectangle
    label {Local Network 1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cdeb8b
    width 1
    border black
    rad 0
    canvas c1
}

annotation a3 {
    iconcoords {350 40 620 290}
    type rectangle
    label {Server Zone}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #f8cecc
    width 1
    border black
    rad 0
    canvas c1
}

annotation a4 {
    iconcoords {0 0 630 630}
    type rectangle
    label {Internal Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #7ea6e0
    width 1
    border black
    rad 0
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses no
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}

